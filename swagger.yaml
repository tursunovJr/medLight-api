swagger: "2.0"
info:
  description: "Документация запросов"
  version: "1.0.0"
  title: "medLight-API"
tags:
- name: "patients"
  description: "Info about patients"
- name: "doctors"
  description: "Info about doctors"
- name: "records"
  description: "Everything about patient's record"
- name: "services"
  description: "Pricelist of services in hospital"
- name: "treatments"
  description: "info about disease and theirs discharge"
  
schemes:
- "https"
paths:
  /patients:
    post:
      tags:
      - "patients"
      summary: "Creates new patient"
      description: "Создание нового пациента в БД клиники"
      operationId: "createPatient"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Patients data needs to be added to the data base"
        required: true
        schema:
            $ref: "#/definitions/Patient"

      responses:
        "201":
          description: "Patient created"
          schema: 
            type: "object"
        "400":
          description: "Bad JSON format"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Bad JSON format"
    get:
      tags:
      - "patients"
      summary: "Finds info about patients"
      operationId: "findPatientsByFilter"
      produces:
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Patient"
  /patients/{uuid}:  
    delete:
      tags:
      - "patients"
      summary: "Deletes a patient with uuid"
      operationId: "deletePatient"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "Patient uuid to delete"
        required: true
        type: "string"
        format: "uuid"
      responses:
        '200':
          description: "Patient deleted"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Sucessful deleted"
        "400":
          description: "Wrong format UUID"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Wrong format UUID"
        "404":
          description: "Patient with uuid not found"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Patient with uuid not found"
    put:
      tags:
      - "patients"
      summary: "Updated patient info"
      operationId: "updatePatient"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "uuid of patient that need to be updated"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          type: "object"
          properties:
            uuid:
              type: "string"
              format: "uuid"
            full_name:
              type: "string"
              example: "Yusupov Felix"
            phone_number:
              type: "string"
              example: "998974544584"
            birthday:
              type: "string"
              format: "date"
      responses:
        '200':
          description: "Patient updated"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Sucessful updated"
        "400":
          description: "Wrong format UUID"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Wrong format UUID"
        "404":
          description: "Patient with uuid not found"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Patient with uuid not found"
    post:
      tags:
      - "patients"
      summary: "Creates new record for patient"
      description: "Создание новой записи для пациента"
      operationId: "createRecord"
      consumes:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "Record uuid to get"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Patients data needs to be added to the data base"
        required: true
        schema:
            $ref: "#/definitions/RecordUuid"

      responses:
        "201":
          description: "Patient created"
          schema: 
            type: "object"
        "400":
          description: "Bad JSON format"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Bad JSON format"
        "404":
          description: "Patient with uuid not found"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Patient with uuid not found"

  /records:
    get:
      tags:
      - "records"
      summary: "Finds info about patients"
      operationId: "findRecordsByFilter"
      produces:
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Record"
  /records/{uuid}:
    get:
      tags:
      - "records"
      summary: "Get patient's record with uuid"
      operationId: "getRecord"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "Record uuid to get"
        required: true
        type: "string"
        format: "uuid"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/RecordUuid"
        "400":
          description: "Wrong format UUID"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Wrong format UUID"
        "404":
          description: "Patient with uuid not found"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Patient with uuid not found"
    delete:
      tags:
      - "records"
      summary: "Deletes a patient'record with uuid"
      operationId: "deleteRecord"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "record uuid to delete"
        required: true
        type: "string"
        format: "uuid"
      responses:
        '200':
          description: "Record deleted"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Sucessful deleted"
        "400":
          description: "Wrong format UUID"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Wrong format UUID"
        "404":
          description: "Record with uuid not found"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Patient with uuid not found"
    put:
      tags:
      - "records"
      summary: "Updated record info"
      operationId: "updateRecord"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "uuid of record that need to be updated"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/RecordUuid"
      responses:
        '200':
          description: "Record updated"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Sucessful updated"
        "400":
          description: "Wrong format UUID"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Wrong format UUID"
        "404":
          description: "Patient with uuid not found"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Patient with uuid not found"
    patch:
      tags:
      - "records"
      summary: "Update status of Payment"
      parameters:
        - name: "uuid"
          in: "path"
          description: "uuid of record that need to be updated"
          required: true
          type: "string"
          format: "uuid"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            type: "object"
            properties:
              payment_status:
                type: "string"
                example: "Оплатил"
      responses:
        '200':
          description: "Payment status updated"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Sucessful updated"
  /doctors:
    post:
      tags:
      - "doctors"
      summary: "Creates new doctor"
      description: "Создание аккаунта для врача"
      operationId: "createDocotor"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Patients data needs to be added to the data base"
        required: true
        schema:
            $ref: "#/definitions/Doctor"

      responses:
        "201":
          description: "Patient created"
          schema: 
            type: "object"
        "400":
          description: "Bad JSON format"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Bad JSON format"  
  /doctors/{uuid}:
    delete:
      tags:
      - "doctors"
      summary: "Deletes a doctor's account with uuid"
      operationId: "deleteDoctor"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "doctor uuid to delete"
        required: true
        type: "string"
        format: "uuid"
      responses:
        '200':
          description: "Doctor deleted"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Sucessful deleted"
        "400":
          description: "Wrong format UUID"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Wrong format UUID"
        "404":
          description: "Doctor with uuid not found"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Doctor with uuid not found"
    put:
      tags:
      - "doctors"
      summary: "Updated doctor's info"
      operationId: "updateDoctor"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "uuid of record that need to be updated"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Updated doctor object"
        required: true
        schema:
          $ref: "#/definitions/Doctor"
      responses:
        '200':
          description: "Doctor updated"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Sucessful updated"
        "400":
          description: "Wrong format UUID"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Wrong format UUID"
        "404":
          description: "Patient with uuid not found"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Patient with uuid not found"
  /services:
    post:
      tags:
      - "services"
      summary: "Creates new service"
      description: "Создание новой услуги"
      operationId: "createService"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Service data needs to be added to the data base"
        required: true
        schema:
            $ref: "#/definitions/Service"
      responses:
        "201":
          description: "Service created"
          schema: 
            type: "object"
        "400":
          description: "Bad JSON format"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Bad JSON format" 
    get:
      tags:
      - "services"
      summary: "Finds info about services"
      operationId: "findServiceByFilter"
      produces:
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Service"
  /services/{uuid}:
    delete:
      tags:
      - "services"
      summary: "Deletes a service with uuid"
      operationId: "deleteService"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "service uuid to delete"
        required: true
        type: "string"
        format: "uuid"
      responses:
        '200':
          description: "Service deleted"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Sucessful deleted"
        "400":
          description: "Wrong format UUID"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Wrong format UUID"
        "404":
          description: "Service with uuid not found"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Service with uuid not found"
    put:
      tags:
      - "services"
      summary: "Updated service's info"
      operationId: "updateService"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "uuid of service that need to be updated"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Updated service object"
        required: true
        schema:
          $ref: "#/definitions/Service"
      responses:
        '200':
          description: "Service updated"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Sucessful updated"
        "400":
          description: "Wrong format UUID"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Wrong format UUID"
        "404":
          description: "Service with uuid not found"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Service with uuid not found"
  /treatments:
    post:
      tags:
      - "treatments"
      summary: "Creates new treatment"
      description: "Создание нового готового лечения для болезни"
      operationId: "createTreatments"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Treatment data needs to be added to the data base"
        required: true
        schema:
            $ref: "#/definitions/Treatment"
      responses:
        "201":
          description: "Treatment created"
          schema: 
            type: "object"
        "400":
          description: "Bad JSON format"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Bad JSON format" 
    get:
      tags:
      - "treatments"
      summary: "Finds info about treatments"
      operationId: "findTreatmentByFilter"
      produces:
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Treatment"
  /treatments/{uuid}:
    delete:
      tags:
      - "treatments"
      summary: "Deletes a treatment with uuid"
      operationId: "deleteTreatment"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "treatment uuid to delete"
        required: true
        type: "string"
        format: "uuid"
      responses:
        '200':
          description: "Treatments deleted"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Sucessful deleted"
        "400":
          description: "Wrong format UUID"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Wrong format UUID"
        "404":
          description: "Treatment with uuid not found"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Treatment with uuid not found"
    put:
      tags:
      - "treatments"
      summary: "Updated treatment's info"
      operationId: "updateTreatment"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "uuid of treatment that need to be updated"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "body"
        description: "Updated treatment object"
        required: true
        schema:
          $ref: "#/definitions/Treatment"
      responses:
        '200':
          description: "Treatment updated"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Sucessful updated"
        "400":
          description: "Wrong format UUID"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Wrong format UUID"
        "404":
          description: "Treatment with uuid not found"
          schema: 
            type: "object"
            properties: 
              message: 
                type: "string"
                example: "Treatment with uuid not found"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        
        "400":
          description: "Invalid record uuid supplied"
        "404":
          description: "Record not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
definitions:
  User:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Admin"
      edit:
        type: "boolean"
      delete:
        type: "boolean"
      create:
        type: "boolean"
      view:
        type: "boolean"
  Patient:
    type: "object"
    properties:
      uuid:
        type: "string"
        format: "uuid"
      full_name:
        type: "string"
        example: "Yusupov Felix"
      phone_number:
        type: "string"
        example: "998974544584"
      birthday:
        type: "string"
        format: "date"
      author:
        $ref: "#/definitions/User"
  PatientNoAuthor: 
    type: "object"
    properties:
      uuid:
        type: "string"
        format: "uuid"
      full_name:
        type: "string"
        example: "Yusupov Felix"
      phone_number:
        type: "string"
        example: "998974544584"
      birthday:
        type: "string"
        format: "date"    
  Record:
    type: "object"
    properties:
      uuid:
        type: "string"
        format: "uuid"
      patient:
        $ref: "#/definitions/PatientNoAuthor"
      doctor:
        $ref: "#/definitions/Doctor"
      record_date:
        type: "string"
        format: "datetime"
      payment_status:
        type: "string"
        example: "Оплатил"
      sum:
        type: "integer"
        example: "50000"
      author:
        $ref: "#/definitions/User"
  Doctor:
    type: "object"
    properties:
      uuid:
        type: "string"
        format: "uuid"
      name:
        type: "string"
        example: "Ивченко Артем"
      speciality:
        type: "string"
        example: "Невропатолог"
      phone_num:
        type: "string"
        example: "998909954112"
      qualification:
        type: "string"
        example: "Высшая"
  RecordUuid:
    type: "object"
    properties:
      uuid:
        type: "string"
        format: "uuid"
      patient:
        $ref: "#/definitions/PatientNoAuthor"
      doctor:
        $ref: "#/definitions/Doctor"
      record_date:
        type: "string"
        format: "datetime"
      used_services:
        type: "array"
        items:
          type: "string"
        example: "ЭЭГ"
      disease:
        type: "string"
        example: "Воспаление лицевого тройничного нерва"
      discharge:
        type: "array"
        items:
          type: "string"
        example: "Ципролет 0.5/3 7 дней"
      payment_status:
        type: "string"
        example: "Неоплатил"
      sum:
        type: "integer"
        example: "50000"
  Service:
    type: "object"
    properties:
      uuid:
        type: "string"
        format: "uuid"
      name: 
        type: "string"
        example: "МРТ головы"
      price:
        type: "integer"
        example: 150000
  Treatment:
    type: "object"
    properties:
      uuid:
        type: "string"
        format: "uuid"
      doctor:
        $ref: "#/definitions/Doctor"
      disease:
        type: "string"
        example: "Воспаление лицевого тройничного нерва"
      discharge:
        type: "array"
        items:
          type: "string"
        example: "Ципролет 0.5/3 7 дней"
      
      
      